1.
You are given a list of n-1 integers and these integers are in the range of 1 to n. There are no duplicates in the list. One of the integers is missing in the list. Write an efficient code to find the missing integer.
Example: 
Input: arr[] = {1, 2, 4, 6, 3, 7, 8}
Output: 5
Explanation: The missing number from 1 to 8 is 5
Input: arr[] = {1, 2, 3, 5}
Output: 4
Explanation: The missing number from 1 to 5 is 4

Solution - 
#include<bits/stdc++.h>

using namespace std;

int main()
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n-1;i++) {
    cin>>arr[i];
    }
    
    //Approch one using mathematical formula
    int total = (n*(n+1))/2;
    for(int i=0;i<n;i++){
       total = total - arr[i];
    }
    cout<<"Missing number is "<<abs(total);
    
    //Approch two using bit manipulation
    int bitXor = 0, bitXorArray = 0;
    for(int i=0;i<n-1;i++){
    bitXorArray = bitXorArray xor arr[i];
    }
    for(int i=1;i<=n;i++){
      bitXor = bitXor ^ i;
    }
    int res = bitXor^bitXorArray;
    cout<<"\nMissing number is " << res;
    return 0;
}

2.
 There are two singly linked lists in a system. By some programming error, the end node of one of the linked list got linked to the second list, forming an inverted Y shaped list. Write a program to get the point where two linked list merge. 

Input     L1 =      1->2->3->4->5 -.
             L2 = 7->8->9->3->4->5

Output  - 3

Solution-
#include <bits/stdc++.h>

using namespace std;
 
// Strucute of node
struct Node {
    int data;
    Node* next;
};
 
// Function to insert a new node
void insert(Node** root, int item)
{
    Node* temp = new Node;
    Node* ptr;
    temp->data = item;
    temp->next = NULL;
 
    if (*root == NULL)
        *root = temp;
    else {
        ptr = *root;
        while (ptr->next != NULL)
            ptr = ptr->next;
        ptr->next = temp;
    }
}

//Function to create a linked list based on the array provided
Node *arrayToList(int arr[], int n)
{
    Node *root = NULL;
    for (int i = 0; i < n; i++)
        insert(&root, arr[i]);
   return root;
}
 
// Main code
int main()
{ 
  //Taking input
  int n1,n2;
  cin>>n1>>n2;
  int arr1[n1], arr2[n2];
  
  for(int i=0;i< n1;i++){
    cin>>arr1[i];
  }
  for(int i=0;i< n2;i++){
    cin>>arr2[i];
  }
  // Creating linked list and storing head of each linked list
  Node* lst1 = arrayToList(arr1, n1);;
  Node* lst2 = arrayToList(arr2, n2);
  //Using map to store each element
  map<int,int> mp;
  
  Node* tmp = lst1;
  while(tmp!=NULL){
    if(mp.find(tmp->data)==mp.end())
    mp.insert(pair<int,int>(tmp->data, 1));
    tmp = tmp->next;
    }
    
  tmp = lst2;
  while(tmp!=NULL && mp.find(tmp->data)==mp.end()){
      tmp = tmp->next;
  }
  cout<<tmp->data;
  return 0;
}


4.  Difference between var , let and const.
Solution-
var - These variable are funcitonal scoped. Var which are defined for for loop and conditions are converted to global variables. Variables can be reassigned.
let - There variables have funcitonal as well as block scope. Their value can be chaged within the block scope. Variables can be reassigned.
const - These variables have funcitonal as well as block scope but their value remains constant and cannot be changed i.e. reassignment is not possible.

5. Mysql ->  Difference between INT(10) and tinyint(2)
Solution-
INT(10) -> It represent a integer with 10 digits long. Each digit of it is 1 bytes. It is unsigned integer and contains the value of from 0 to pow(2, 2^32)-1;
tinyint(2) -> It is the tiny integer datatyoe with width of 2 digits only. It holds value from -128 to 127.



